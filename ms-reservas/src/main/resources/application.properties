spring.application.name=ms-reservas
server.port=${PORT:8082}

# API Documentation
api.common.version=1.0.0
api.common.title=API Reservas y Disponibilidad
api.common.description=Documentaci√≥n de la API de reservas y disponibilidad

spring.config.import=optional:classpath:application-openapi.yml

# ===============================
# Database Configuration (PostgreSQL)
# ===============================
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/reservas_db}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:reservas_user}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:reservas_password}
spring.datasource.driver-class-name=org.postgresql.Driver

# ===============================
# JPA / Hibernate
# ===============================
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ===============================
# Actuator (para health/info)
# ===============================
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always
management.server.port=${MANAGEMENT_PORT:${PORT:8082}}

# ===============================
# OIDC / JWT (Keycloak)
# Usa 8090 en local; en Docker Compose usa: http://keycloak:8080/realms/eventos
# ===============================
spring.security.oauth2.resourceserver.jwt.issuer-uri=${OIDC_ISSUER:http://localhost:8090/realms/eventos}

# ===============================
# Logging
# ===============================
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.orm.jdbc.bind=trace

# ===============================
# Flyway
# ===============================
spring.flyway.enabled=false

# ===============================
# Eureka Client
# ===============================
eureka.client.service-url.defaultZone=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka/}
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
